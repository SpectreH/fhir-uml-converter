@startuml
hide empty members
skinparam wrapwidth 500
left to right direction

class "Observation (Observation)" {
	{field} + id : id  [0..1]  
	{field} + meta : Meta  [0..1]  
	{field} + implicitRules : uri  [0..1]  
	{field} + language : code  [0..1]  
	{field} + text : Narrative  [0..1]  
	{field} + contained : Resource  [0..*]  
	{field} + extension : Extension  [0..*]  
	{field} + modifierExtension : Extension  [0..*]  
	{field} + identifier : Identifier  [0..*]  
	{field} ~ instantiates[x] : canonical(ObservationDefinition), Reference(ObservationDefinition)  [0..1]  
	{field} + triggeredBy : BackboneElement  [0..*]  
	{field} # status : code = **final** [1..1]  
	{field} + category : CodeableConcept  [1..*]  
	{field} + code : CodeableConcept  [1..1]  
	{field} ~ subject : Reference(ee-patient)  [1..1]  
	{field} ~ focus : Reference(Resource)  [0..*]  
	{field} ~ encounter : Reference(ee-encounter)  [0..1]  
	{field} + effective[x] : Period  [0..1]  
	{field} + issued : instant  [1..1]  
	{field} ~ performer : Reference(ee-related-person)  [0..*]  
	{field} + value[x] : CodeableConcept  [1..1]  
	{field} + dataAbsentReason : CodeableConcept  [0..1]  
	{field} + note : Annotation  [0..*]  
	{field} ~ derivedFrom : Reference(DocumentReference | ImagingStudy | ImagingSelection | QuestionnaireResponse | ee-observation | MolecularSequence | GenomicStudy)  [0..*]  
}
struct "BackboneElement (triggeredBy)" {
	{field} + id : string  [0..1]  
	{field} + extension : Extension  [0..*]  
	{field} + modifierExtension : Extension  [0..*]  
	{field} ~ observation : Reference(ee-observation)  [1..1]  
	{field} + type : code  [1..1]  
	{field} + reason : string  [0..1]  
}
class "CodeableConcept (category)" {
	{field} + id : id  [0..1]  
	{field} + extension : Extension  [0..*]  
	{field} + coding : Coding  [1..*]  
	{field} + text : string  [0..1]  
}
class "Slices for coding (category)"<< (S,#FF7700) Slices >> {
	--Slices--
	{field} + obscat : Coding  [1..*]  
}
class "Coding (obscat)" {
	{field} + id : id  [0..1]  
	{field} + extension : Extension  [0..*]  
	{field} # system : uri = **http://terminology.hl7.org/CodeSystem/observation-category** [0..1]  
	{field} + version : string  [0..1]  
	{field} # code : code = **social-history** [0..1]  
	{field} # display : string = **Social history** [0..1]  
	{field} + userSelected : boolean  [0..1]  
}
class "CodeableConcept (code)" {
	{field} + coding : N/A  [1..1]  
}
class "N/A (coding)" {
	{field} # system : N/A = **http://snomed.info/sct** [1..1]  
	{field} # code : N/A = **125680007** [1..1]  
	{field} # display : N/A = **Marital status** [1..1]  
}
"Observation (Observation)" --o "0..*" "BackboneElement (triggeredBy)" : **triggeredBy**
"Observation (Observation)" --o "1..*" "CodeableConcept (category)" : **category**
"CodeableConcept (category)" --o "1..*" "Slices for coding (category)" : **coding**
"Slices for coding (category)" --o "1..*" "Coding (obscat)" : **obscat**
"Observation (Observation)" --o "1..1" "CodeableConcept (code)" : **code**
"CodeableConcept (code)" --o "1..1" "N/A (coding)" : **coding**
legend top right
**url**: https://fhir.ee/mpi/StructureDefinition/ee-mpi-socialhistory-marital-status
**version**: 1.1.1
**name**: EEMPISocialHistoryMaritalStatus
**status**: Active
**kind**: Resource
**type**: Observation
**abstract**: false
**baseDefinition**: https://fhir.ee/base/StructureDefinition/ee-observation
end legend
@enduml